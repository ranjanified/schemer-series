(in-package :schemer-series/tests)

(def-suite chapter14 :in the-seasoned-schemer)
(in-suite chapter14)

(test left-most*
  (is (equal? (let ((l '()))
		(left-most* l))
	      '()))
  (is (equal? (let ((l '(1)))
		(left-most* l))
	      1))
  (is (equal? (let ((l '((1))))
		(left-most* l))
	      '1))
  (is (equal? (let ((l '(((a) b) (c d))))
		(left-most* l))
	      'a))
  (is (equal? (let ((l '(((a) ()) () (e))))
		(left-most* l))
	      'a))
  (is (equal? (let ((l '(((() a) ()))))
		(left-most* l))
	      'a)))

(test remberl*
  (is (eqlist? (let ((a 1)
		     (l '()))
		 (remberl* a l))
	       '()))
  (is (eqlist? (let ((a 'salad)
		     (l '((Swedish rye)
			  (French (mustard salad turkey))
			  salad)))
		 (remberl* a l))
	       '((Swedish rye)(French (mustard turkey)) salad)))
  (is (eqlist? (let ((a 'meat)
		     (l '((pasta meat) pasta (noodles meat sauce) meat tomatoes)))
		 (remberl* a l))
	       '((pasta) pasta (noodles meat sauce) meat tomatoes))))

(test depth*
  (is (equal? (let ((l '()))
		(depth* l))
	      1))
  (is (equal? (let ((l '((pickled) peppers (peppers pickled))))
		(depth* l))
	      2))
  (is (equal? (let ((l '(margarine ((bitter butter) (makes) (batter (bitter))) butter)))
		(depth* l))
	      4))
  (is (equal? (let ((l '(c (b (a b) a) a)))
		(depth* l))
	      3)))
(test rm
  (is (eqlist? (let ((a 1)
		     (l '(4 5 3 2 1 4 5)))
		 (rm a l 'oh))
	       '(4 5 3 2 4 5)))
  (is (eqlist? (let ((a 1)
		     (l '((1) 4 5 3 2 1 4 5)))
		 (rm a l 'oh))
	       '(() 4 5 3 2 1 4 5)))
  (is (equal? (let ((a 'noodles)
		     (l '((food) more (food))))
		 (catch 'oh (rm a l 'oh)))
	       "no")))
